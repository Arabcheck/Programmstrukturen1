// Akiel Leabi und Luka Pervan
// Vier Mathematische Funktonen und vier Prozeduren zum Testen der Funktionen
program aufgabe6;
{Apptype console}
{$R+,Q+,X-}
uses
  SysUtils, Math, crt;

// Überprüft, ob eine Zahl durch einen bestimmten Teiler teilbar ist.
// @param
//   num - zu überprüfende Zahl
//   divider - potentieller Teiler
// @return
//   True, wenn num durch divider teilbar ist oder False, wenn nicht
//   bzw. wenn divider 0 ist
function isDivider(num, divider: word): boolean;
begin
  if divider = 0 then
    isDivider := false // Kein Divider gefunden
  else
    isDivider := (num mod divider = 0);
end;

// Findet den nächsten Teiler einer Zahl, der größer als ein gegebener Wert ist.
// @param
//   num - Zahl, für die ein Teiler gesucht wird
//   limit - untere Grenze, ab der nach Teilern gesucht werden soll
// @return
//   Den kleinsten Teiler von num, der größer als limit ist, oder 0,
//   wenn kein solcher Teiler existiert
function getNextDividerBiggerThan(num, limit: word): word;
var
  i: word;
begin
  for i := limit + 1 to num do
    if (num mod i = 0) then
    begin
      getNextDividerBiggerThan := i;
      exit;
    end;
  getNextDividerBiggerThan := 0; // Kein Teiler gefunden
end;

// Überprüft, ob eine Zahl eine Primzahl ist.
// Eine Primzahl ist nur durch 1 und sich selbst teilbar.
// @param
//   num - zu überprüfende Zahl
// @return
//   True, wenn num eine Primzahl ist, sonst False
function isPrime(num: word): boolean;
var
  i: integer;
  primzahl: boolean;
begin
  if num < 2 then
    isPrime := false // ist keine Primzahl
  else
  begin
    primzahl := true;
    for i := 2 to trunc(sqrt(num)) do
      if num mod i = 0 then
        primzahl := false;
    isPrime := primzahl; 
  end;
end;

// Überprüft, ob eine Zahl eine vollkommene Zahl ist.
// Eine vollkommene Zahl ist gleich der Summe ihrer echten Teiler.
// Beispiel: 6 = 1 + 2 + 3
// @param
//   num - zu überprüfende Zahl
// @return
//   True, wenn num eine vollkommene Zahl ist, sonst False
function isPerfectNumber(num : word) : boolean;
var
  i, sum: word;
begin
  sum := 0;
  if num > 0 then
  begin
    for i := 1 to num - 1 do
      if num mod i = 0 then
        sum := sum + i;
    isPerfectNumber := (sum = num);
  end
  else
    isPerfectNumber := false; // ist keine vollkommene Zahl
end;

// Testet die Funktion isDivider mit verschiedenen Testfällen
// @param
//   testsOK - gibt die Anzahl der bestandenen Tests zurück (@out)
//   testsFailed - gibt die Anzahl der fehlgeschlagenen Tests zurück (@out)
procedure testIsDivider(var testsOK, testsFailed: byte);
var
  testNum, testDivider: word;
  expectedRes, actualRes: boolean;
begin
  testsOK := 0;
  testsFailed := 0;

  // Testfall 1
  testNum := 10; testDivider := 2; expectedRes := true;
  actualRes := isDivider(testNum, testDivider);
  write('isDivider(', testNum, ', ', testDivider, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 2
  testNum := 10; testDivider := 3; expectedRes := false;
  actualRes := isDivider(testNum, testDivider);
  write('isDivider(', testNum, ', ', testDivider, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 3
  testNum := 0; testDivider := 5; expectedRes := true;
  actualRes := isDivider(testNum, testDivider);
  write('isDivider(', testNum, ', ', testDivider, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 4
  testNum := 10; testDivider := 0; expectedRes := false;
  actualRes := isDivider(testNum, testDivider);
  write('isDivider(', testNum, ', ', testDivider, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 5
  testNum := 1; testDivider := 1; expectedRes := true;
  actualRes := isDivider(testNum, testDivider);
  write('isDivider(', testNum, ', ', testDivider, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;
end;

// Testet die Funktion getNextDividerBiggerThan mit verschiedenen Testfällen
// @param
//   testsOK - gibt die Anzahl der bestandenen Tests zurück (@out)
//   testsFailed - gibt die Anzahl der fehlgeschlagenen Tests zurück (@out)
procedure testGetNextDividerBiggerThan(var testsOK, testsFailed: byte);
var
  num, limit, expectedRes, actualRes: word;
begin
  testsOK := 0;
  testsFailed := 0;

  // Testfall 1
  num := 10; limit := 1; expectedRes := 2;
  actualRes := getNextDividerBiggerThan(num, limit);
  write('getNextDividerBiggerThan(', num, ', ', limit, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 2
  num := 10; limit := 2; expectedRes := 5;
  actualRes := getNextDividerBiggerThan(num, limit);
  write('getNextDividerBiggerThan(', num, ', ', limit, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 3
  num := 10; limit := 5; expectedRes := 10;
  actualRes := getNextDividerBiggerThan(num, limit);
  write('getNextDividerBiggerThan(', num, ', ', limit, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 4
  num := 10; limit := 10; expectedRes := 0;
  actualRes := getNextDividerBiggerThan(num, limit);
  write('getNextDividerBiggerThan(', num, ', ', limit, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 5
  num := 1; limit := 0; expectedRes := 1;
  actualRes := getNextDividerBiggerThan(num, limit);
  write('getNextDividerBiggerThan(', num, ', ', limit, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;
end;

// Testet die Funktion isPrime mit verschiedenen Testfällen
// @param
//   testsOK - gibt die Anzahl der bestandenen Tests zurück (@out)
//   testsFailed - gibt die Anzahl der fehlgeschlagenen Tests zurück (@out)
procedure testIsPrime(var testsOK, testsFailed: byte);
var
  testNum: word;
  expectedRes, actualRes: boolean;
begin
  testsOK := 0;
  testsFailed := 0;

  // Testfall 1
  testNum := 2; expectedRes := true;
  actualRes := isPrime(testNum);
  write('isPrime(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 2
  testNum := 0; expectedRes := false;
  actualRes := isPrime(testNum);
  write('isPrime(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 3
  testNum := 17; expectedRes := true;
  actualRes := isPrime(testNum);
  write('isPrime(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 4
  testNum := 18; expectedRes := false;
  actualRes := isPrime(testNum);
  write('isPrime(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 5
  testNum := 1; expectedRes := false;
  actualRes := isPrime(testNum);
  write('isPrime(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;
end;

// Testet die Funktion isPerfectNumber mit verschiedenen Testfällen
// @param
//   testsOK - gibt die Anzahl der bestandenen Tests zurück (@out)
//   testsFailed - gibt die Anzahl der fehlgeschlagenen Tests zurück (@out)
procedure testIsPerfectNumber(var testsOK, testsFailed: byte);
var
  testNum: word;
  expectedRes, actualRes: boolean;
begin
  testsOK := 0;
  testsFailed := 0;

  // Testfall 1
  testNum := 6; expectedRes := true;
  actualRes := isPerfectNumber(testNum);
  write('isPerfectNumber(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end 
  else 
  begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 2
  testNum := 28; expectedRes := true;
  actualRes := isPerfectNumber(testNum);
  write('isPerfectNumber(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then 
  begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end 
  else 
  begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 3
  testNum := 496; expectedRes := true;
  actualRes := isPerfectNumber(testNum);
  write('isPerfectNumber(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then
  begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end 
  else 
  begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 4
  testNum := 12; expectedRes := false;
  actualRes := isPerfectNumber(testNum);
  write('isPerfectNumber(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then
  begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end 
  else 
  begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;

  // Testfall 5
  testNum := 0; expectedRes := false;
  actualRes := isPerfectNumber(testNum);
  write('isPerfectNumber(', testNum, ') -> erwartet: ', expectedRes, ', bekommen: ', actualRes, ' => ');
  if actualRes = expectedRes then begin
    TextColor(LightGreen); writeln('OK'); TextColor(White); inc(testsOK);
  end else begin
    TextColor(LightRed); writeln('FEHLER'); TextColor(White); inc(testsFailed);
  end;
end;

// Hauptprogramm: Ruft alle Testprozeduren auf und gibt die Gesamtstatistik aus
var
  ok, fail, sumOK, sumFail: byte;
begin
  sumOK := 0; sumFail := 0;
  writeln('Teste isDivider:');
  testIsDivider(ok, fail);
  sumOK := sumOK + ok; sumFail := sumFail + fail;
  writeln;

  writeln('Teste getNextDividerBiggerThan:');
  testGetNextDividerBiggerThan(ok, fail);
  sumOK := sumOK + ok; sumFail := sumFail + fail;
  writeln;

  writeln('Teste isPrime:');
  testIsPrime(ok, fail);
  sumOK := sumOK + ok; sumFail := sumFail + fail;
  writeln;

  writeln('Teste isPerfectNumber:');
  testIsPerfectNumber(ok, fail);
  sumOK := sumOK + ok; sumFail := sumFail + fail;
  writeln;

  writeln('Tests ok: ', sumOK, ', Tests fehlgeschlagen: ', sumFail);
end.
