//Aufgabe 9
//Einstieg und erste einfache Aufgaben mit Zeigern

{$APPTYPE CONSOLE}
{$R+,Q+,X-}

program aufgabe9;

uses
   SysUtils;

{
1)  Legt einen Typ fuer einen Zeiger auf eine Bytevariable an.
2)  Deklariert eine Variable vom Typ byte und 2 Variablen vom Typ Zeiger auf byte.
3)  Belegt die Bytevariable mit dem Wert 3 und lasst beide Zeiger auf diese Variable zeigen.
    Hinweis: Ein new ist hier nicht erforderlich!
4)  Gebt mit writeln die Bytevariable, die dereferenzierten Zeigervariablen sowie die Adressen,
    auf die die Zeigervariablen zeigen durch Leerzeichen getrennt aus (insg. also 5 Werte).
5)  Setzt jetzt den Wert, auf den die erste Zeigervariable zeigt, von 3 auf 5.
6)  Wiederholt dieselbe Ausgabe der 5 Werte wie in Schritt 4.
    FRAGE: Was hat sich in der Ausgabe geaendert?
    FRAGE: Warum haben sich genau diese Werte geaendert?
7)  Legt nun einen Typ fuer einen Record mit 3 Bytewerten an.
8)  Deklariert Euch eine Variable von diesem Recordtyp und drei weitere Variablen vom Typ
    Zeiger auf Byte.
9)  Lasst die drei neuen Zeiger jetzt jeweils auf einen der drei Bytewerte aus dem Record zeigen.
10) Lasst Euch die Adressen und die Inhalte der drei Zeiger jeweils durch Leerzeichen getrennt
    ausgeben (also insg. 6 Werte).
    FRAGE: Was faellt bei den Adressen auf?
    FRAGE: Welche Inhalte werden ausgegeben? Warum genau diese?
11) Legt einen weiteren Typ fuer einen Record mit 3 Integerwerten sowie einen Typ
    Zeiger auf integer an.
12) Deklariert Euch eine Variable vom neuen Recordtyp und drei weitere Variablen vom Typ
    Zeiger auf integer.
13) Lasst dann die drei neuen Zeiger jeweils auf einen der drei Integerwerte aus dem Record zeigen.
14) Lasst Euch die Adressen, auf die die drei Integer-Zeiger zeigen jeweils durch Leerzeichen getrennt ausgeben
    (also insg. 3 Werte).
    FRAGE: Was faellt bei den Adressen diesmal auf, auch im Vergleich zu vorher?
15) Legt ueber dem Hauptprogramm drei kleine Prozeduren mal2_a, mal2_b und mal2_c an, die jeweils 
    einen Parameter haben, dessen Wert im Rumpf mal 2 genommen wird.
	  Die erste Prozedur soll dabei einen Bytewert als Wertparameter bekommen, die zweite Prozedur 
    einen Bytewert als Referenzparameter und die dritte Prozedur einen Zeiger auf einen Bytewert.
    Ergaenzt danach dreimal nacheinander folgenden Code:
	  - das Setzen einer Bytevariable auf den Wert 3
	  - einen Aufruf einer der Prozeduren mit diesem Bytewert (jede 1x)
	  - eine Ausgabe des Bytewertes nach dem Aufruf mit writeln
	  FRAGE: Welche Erkenntnis kann man aus den ausgegebenen Werten ziehen?
16) Zeiger koennen auf alles moegliche zeigen - auch auf einen Record.
    Z.B. auch auf einen Record, der einen Bytewert und einen Zeiger vom Typ
    Zeiger auf diesen Record beinhaltet. Legt Euch einen passenden Typ dazu an!
    Der Typ Zeiger auf diesen Record muss dazu natuerlich vorab deklariert werden.
	  Deklariert folgend zwei Variablen vom Typ Zeiger auf den Record.
	  Holt Euch dann mit der Funktion new(...) jeweils Speicher fuer den Record, auf den die Zeiger zeigen.
	  Belegt bei beiden Zeigern auf die Records den Bytewert mit einer beliebigen (aber verschiedenen) Zahl.
	  Lasst dann den im Record enthaltenen Zeiger der ersten Variable auf den zweiten Record zeigen und
    den Zeiger der zweiten Variable auf nil. Schon haben wir unsere erste kleine Liste gebaut!
17) Lasst Euch mit writeln die beiden Bytewerte ausgeben. Ihr duerft dabei allerdings nur den ersten Zeiger
    benutzen!!
    FRAGE: Koennte man auch beide Bytewerte ausgeben, wenn man nur den zweiten Zeiger benutzen duerfte?
           Falls ja: Wie? Falls nein: Warum nicht?
}

// 15) Drei Prozeduren für verschiedene Parameterübergaben
procedure mal2_a(wert: Byte);
begin
  wert := wert * 2; // Wertparameter - verändert nur lokale Kopie
end;

procedure mal2_b(var wert: Byte);
begin
  wert := wert * 2; // Referenzparameter verändert Original
end;

procedure mal2_c(zeiger: PByte);
begin
  zeiger^ := zeiger^ * 2; // Zeiger - verändert Wert an Adresse
end;

type
  // 1) Typ für Zeiger auf Bytevariable
  PByte = ^Byte;
  
  // 7) Record mit 3 Bytewerten
  TDreiBytes = record
    Byte1, Byte2, Byte3: Byte;
  end;
  
  // 11) Record mit 3 Integerwerten und Zeiger auf Integer
  TDreiInts = record
    Int1, Int2, Int3: Integer;
  end;
  PInteger = ^Integer;
  
  // 16) Rekursiver Record (Zeiger muss vorab deklariert werden)
  PListenKnoten = ^TListenKnoten;
  TListenKnoten = record
    Wert: Byte;
    Next: PListenKnoten;
  end;

var
  // 2) Eine Bytevariable und 2 Zeiger auf Byte
  einByte: Byte;
  zeiger1, zeiger2: PByte;
  
  // 8) Record mit 3 Bytes und 3 weitere Zeiger
  recordMitBytes: TDreiBytes;
  byteZeiger1, byteZeiger2, byteZeiger3: PByte;
  
  // 12) Record mit 3 Integers und 3 Zeiger auf Integer
  recordMitInts: TDreiInts;
  intZeiger1, intZeiger2, intZeiger3: PInteger;
  
  // 15) Variable für Prozedurtests
  testByte: Byte;
  
  // 16) Zwei Zeiger für Liste
  listenKnoten1, listenKnoten2: PListenKnoten;

begin
  WriteLn('=== Aufgabe 9: Zeiger-Grundlagen ===');
  WriteLn;
  
  // 3) Bytevariable mit Wert 3 belegen und beide Zeiger darauf zeigen lassen
  WriteLn('Schritte 1-4: Grundlagen');
  einByte := 3;
  zeiger1 := @einByte;      //@ ist der Dereferenzierungsoperator, der die Adresse von einByte liefert
  zeiger2 := @einByte;      // Beide Zeiger zeigen auf dieselbe Bytevariable
  
  // 4) Ausgabe: Bytevariable, beide dereferenzierten Zeiger, beide Adressen
  WriteLn('Werte vor Änderung: ', einByte, ' ', zeiger1^, ' ', zeiger2^, ' ', 
          UInt64(zeiger1), ' ', UInt64(zeiger2));    // UInt64 wandelt Zeiger in Ganzzahl um für die Ausgabe
  
  // 5) Wert über ersten Zeiger von 3 auf 5 ändern
  zeiger1^ := 5;
  
  // 6) Dieselbe Ausgabe wiederholen
  WriteLn('Werte nach Änderung: ', einByte, ' ', zeiger1^, ' ', zeiger2^, ' ', 
          UInt64(zeiger1), ' ', UInt64(zeiger2));
  WriteLn('ANTWORT: Alle drei Werte (einByte, zeiger1^, zeiger2^) haben sich von 3 auf 5 geändert');
  WriteLn('BEGRÜNDUNG: Alle zeigen auf dieselbe Speicherstelle - Änderung wirkt überall');
  WriteLn;
  
  // 9) Drei Zeiger auf die drei Bytewerte im Record zeigen lassen
  WriteLn('Schritte 7-10: Record mit Bytes');
  byteZeiger1 := @recordMitBytes.Byte1;  // @ gibt die Adresse des Feldes zurück
  byteZeiger2 := @recordMitBytes.Byte2;
  byteZeiger3 := @recordMitBytes.Byte3;
  
  // 10) Adressen und Inhalte der drei Zeiger ausgeben
  WriteLn('Adressen und Inhalte: ', UInt64(byteZeiger1), ' ', byteZeiger1^, ' ',
          UInt64(byteZeiger2), ' ', byteZeiger2^, ' ',
          UInt64(byteZeiger3), ' ', byteZeiger3^);
  WriteLn('ANTWORT Adressen: Die Adressen sind aufeinanderfolgend (Differenz meist 1)');
  WriteLn('ANTWORT Inhalte: Meist 0 oder Zufallswerte - uninitialisierte Speicherstellen');
  WriteLn;
  
  // 13) Drei Zeiger auf die drei Integerwerte im Record zeigen lassen
  WriteLn('Schritte 11-14: Record mit Integers');
  intZeiger1 := @recordMitInts.Int1; // bezieht sich auf Tmitdreiints
  intZeiger2 := @recordMitInts.Int2; //@ gibt die Adresse des Feldes zurück
  intZeiger3 := @recordMitInts.Int3; 
  
  // 14) Adressen der drei Integer-Zeiger ausgeben
  WriteLn('Integer-Adressen: ', UInt64(intZeiger1), ' ', UInt64(intZeiger2), ' ', UInt64(intZeiger3));
  WriteLn('ANTWORT: Die Adressdifferenzen sind größer (meist 4 oder 8) - Integer brauchen mehr Speicher als Bytes');
  WriteLn;
  
  // 15) Tests der drei Prozeduren
  WriteLn('Schritt 15: Parameterübergabe-Tests');
  
  // Test mal2_a (Wertparameter)
  testByte := 3;
  mal2_a(testByte);
  WriteLn('Nach mal2_a (Wertparameter): ', testByte);
  
  // Test mal2_b (Referenzparameter)  
  testByte := 3;
  mal2_b(testByte);
  WriteLn('Nach mal2_b (Referenzparameter): ', testByte);
  
  // Test mal2_c (Zeiger)
  testByte := 3;
  mal2_c(@testByte);
  WriteLn('Nach mal2_c (Zeiger): ', testByte);
  WriteLn('ERKENNTNIS: Nur Referenzparameter und Zeiger ändern das Original (6), Wertparameter nicht (3)');
  WriteLn;
  
  // 16) Dynamische Liste erstellen
  WriteLn('Schritte 16-17: Einfache Liste');
  New(listenKnoten1);
  New(listenKnoten2);
  
  // Bytewerte mit verschiedenen Zahlen belegen
  listenKnoten1^.Wert := 42;
  listenKnoten2^.Wert := 99;
  
  // Verkettung: erster Knoten zeigt auf zweiten, zweiter auf nil
  listenKnoten1^.Next := listenKnoten2;
  listenKnoten2^.Next := nil;
  
  // 17) Beide Bytewerte nur über ersten Zeiger ausgeben
  WriteLn('Beide Werte über ersten Zeiger: ', listenKnoten1^.Wert, ' ', listenKnoten1^.Next^.Wert);
  WriteLn('ANTWORT: Nein, über den zweiten Zeiger allein geht es nicht');
  WriteLn('BEGRÜNDUNG: Der zweite Zeiger zeigt auf nil, kann also nicht rückwärts navigieren');
  
  // Speicher wieder freigeben
  Dispose(listenKnoten1);
  Dispose(listenKnoten2);
  
  WriteLn;
  WriteLn('=== Alle Aufgaben abgeschlossen ===');
  WriteLn('Drücken Sie Enter...');
  ReadLn;
end.
