program Aufgabe7;
{Apptype console}
{$R+,Q+,X-}

uses
  SysUtils, Math, Crt;

const 
  COLS = 10;
  ROWS = 12;
  OFFSET_COL : array[0..3] of integer = (0, 1, 0, -1); // up, right, down, left
  OFFSET_ROW : array[0..3] of integer = (-1, 0, 1, 0);
  FIELD_10x12 : string = 'KKKKKKKKKKKKKWWWWWKKKWWWEEEWKKKWTSBEEWKKKWWWEBTWKKKWTWWBEWKKKWEWETEWWKKWBEXBBTWKKWEEETEEWKKWWWWWWWWKKKKKKKKKKKKKKKKKKKKK'; 

type
  State = (StateEmpty, StateWall, StateBox, StateTarget, StateSokoban, StateBoxOnTarget,StateBackground, StateSokobanOnTarget);
  TWidth = 1..COLS;
  THeight = 1..ROWS;
  TField = array[TWidth, THeight] of State;
  TDir = (up, right, down, left);

var
  Spielfeld : String;

function IsValidCord(col, row: Integer): Boolean;
begin
 isValidCoord := (col >= low(TWidth)) and (col <= high(TWidth)) and
                  (row >= low(THeight)) and (row <= high(THeight));
end;

function InitField : TField;
var
  field : TField;
  stringIndex: integer;
  col, row: integer;
  currentChar: char;

begin
 stringIndex := 1;
 for row := low(THeight) to high(THeight) do
 begin
  if stringIndex <= Length(FIELD_10x12) then
    begin
    currentChar := Field_10x12[stringIndex];
    case currentChar of
      'K' : field [row, col] := StateBackground; // Sokoban
      'W' : field [row, col] := StateWall; // Wall 
      'B' : field [row, col] := StateBox; // Box
      'E' : field [row, col] := StateEmpty; // Empty
      'T' : field [row, col] := StateTarget; // Target
      'X' : field [row, col] := StateBoxOnTarget; // Box on Target
      'S' : field [row, col] := StateSokoban; // Sokoban
      'O' : field [row, col] := StateSokobanOnTarget; // Sokoban on Target
      else field[row, col] := StateEmpty;
      end;
    end
    else
    field[row, col] := StateEmpty; // Default to empty if no match

    inc(stringIndex);
    end;


end;

procedure PrintField(Field: TField);
var
  cols, rows: TWidth;
begin
    setPosition(1, 2); // Ab der zweiten Zeile ausgeben

    for rows := low(THeight) to high(THeight) do
    begin
        for cols := low(TWidth) to high(TWidth) do
        begin
            case Field[cols, rows] of
                StateEmpty:
                begin
                TextColor := White;
                write('░'); // empty 
                end;
                StateWall:
                begin
                TextColor := LightGrey;
                write('░'); // Wand
                end;
                StateBox:
                begin
                TextColor := Yellow;
                write('░'); // Box
                end;
                StateTarget:
                begin
                TextColor := LightGreen;
                write('o'); // Zielfeld 
                end;
                StateSokoban:
                begin
                TextColor := Red;
                write('░'); // Spieler aka Sokoban
                end;
                StateBoxOnTarget:
                begin
                TextColor := LightGreen;
                write('░'); // Box auf Zielfeld
                end;
                StateBackground:
                begin
                TextColor := Black;
                write('░'); // Hintergrund 
                end;

        end;
        end;  



    StateEmpty: Write('▓'); // empty
    StateWall: Write('▓'); // wall
    StateBox: Write('▓'); // box
    StateTarget: Write('o'); // target
    StateSokoban: Write('▓'); // sokoban
    StateBoxOnTarget: Write('▓'); // box on target


end;

procedure MoveSokoban(var Field: TField; dir : TDir; var steps, moves: byte);
begin
  


end;

procedure SetConsolePosition(x, y: byte);
begin
end;

function IsSolvable(field : TField): Boolean;
begin
end;

function isSolved(field : TField) : boolean;
begin
end;

begin
  // Hauptprogrammcode hier
end.
